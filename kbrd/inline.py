from typing import Optional, Dict

from aiogram.filters.callback_data import CallbackData
from aiogram.types import InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder


### –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∏–Ω–ª–∞–π-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É" #############
class MenuCallBack(CallbackData, prefix='menu'):
    """
       –ö–ª–∞—Å—Å –¥–ª—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –ø—É–Ω–∫—Ç–∞–º–∏ –º–µ–Ω—é.

       :param menu_name: –ù–∞–∑–≤–∞–Ω–∏–µ –ø—É–Ω–∫—Ç–∞ –º–µ–Ω—é, –∫–æ—Ç–æ—Ä—ã–π –±—ã–ª –≤—ã–±—Ä–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.
       :param page: –°—Ç—Ä–∞–Ω–∏—Ü–∞ –º–µ–Ω—é (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1).
       """
    menu_name: str
    page: int = 1


def get_user_main_btns(
        *,
        btns: Dict[str, str] = None,

        sizes: tuple[int] = (2, 1)):
    """
       –°–æ–∑–¥–∞–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

       :param btns: –°–ª–æ–≤–∞—Ä—å –∫–Ω–æ–ø–æ–∫, –≥–¥–µ –∫–ª—é—á - —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏, –∞ –∑–Ω–∞—á–µ–Ω–∏–µ - –¥–∞–Ω–Ω—ã–µ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞.
                    –ï—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–∞–±–æ—Ä —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫.
       :param sizes: –ö–æ—Ä—Ç–µ–∂, –æ–ø—Ä–µ–¥–µ–ª—è—é—â–∏–π —Ä–∞–∑–º–µ—Ä—ã –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã (—á–∏—Å–ª–æ –∫–Ω–æ–ø–æ–∫ –≤ —Å—Ç—Ä–æ–∫–µ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫).
       :return: –û–±—ä–µ–∫—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏.
       """
    if btns is None:
        btns = {
            "–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏–µ–º ‚úê": 'make an appoint',
            '–û –Ω–∞—Å ‚úã': 'about',
            '–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ üìù': 'view_app'

        }

    keyboard = InlineKeyboardBuilder()

    for text, menu_name in btns.items():
        keyboard.add(InlineKeyboardButton(text=text, callback_data=MenuCallBack(menu_name=menu_name).pack()))

    return keyboard.adjust(*sizes).as_markup()
